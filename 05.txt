# Importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from math import exp

# Loading and inspecting the dataset
data = pd.read_csv("Social_Network_Ads.csv")
data.head()
data.describe()

# Visualizing the relationship between "Age" and "Purchased" using a scatter plot
plt.scatter(data['Age'], data['Purchased'])
plt.xlabel("Age")
plt.ylabel("Purchased")
plt.show()

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data["Age"], data["Purchased"], test_size=0.2)

# Creating and training a logistic regression model
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train.values.reshape(-1, 1), y_train.values.reshape(-1, 1).ravel())

# Making predictions on the test set and visualizing the predicted values
y_pred_sk = model.predict(X_test.values.reshape(-1, 1))
plt.clf()
plt.scatter(X_test, y_test)
plt.scatter(X_test, y_pred_sk, c="red")
plt.xlabel("Age")
plt.ylabel("Purchased")
plt.show()

# Calculating and printing the accuracy of the model
print(f"Accuracy = {model.score(X_test.values.reshape(-1, 1), y_test.values.reshape(-1, 1))}")

# Calculating and printing the confusion matrix metrics
from sklearn.metrics import confusion_matrix
tn, fp, fn, tp = confusion_matrix(y_test, y_pred_sk).ravel()
print("True Negatives: ", tn)
print("False Positives: ", fp)
print("False Negatives: ", fn)
print("True Positives: ", tp)

# Calculating accuracy, precision, recall, and error rate metrics
Accuracy = (tn + tp) * 100 / (tp + tn + fp + fn)
print("Accuracy {:0.2f}%:".format(Accuracy))

Precision = tp / (tp + fp)
print("Precision {:0.2f}".format(Precision))

Recall = tp / (tp + fn)
print("Recall {:0.2f}".format(Recall))

err = (fp + fn) / (tp + tn + fn + fp)
print("Error rate {:0.2f}".format(err))
